// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/BrianLusina/skillq/server/app/di"
	"github.com/BrianLusina/skillq/server/app/internal/database/repositories/userrepo"
	"github.com/BrianLusina/skillq/server/app/internal/database/repositories/userverification"
	"github.com/BrianLusina/skillq/server/app/internal/domain/services/usersvc"
	"github.com/BrianLusina/skillq/server/app/internal/publishers"
	"github.com/BrianLusina/skillq/server/infra/clients/email"
	"github.com/BrianLusina/skillq/server/infra/logger"
	"github.com/BrianLusina/skillq/server/infra/messaging/amqp"
	"github.com/BrianLusina/skillq/server/infra/messaging/amqp/consumer"
	"github.com/BrianLusina/skillq/server/infra/messaging/amqp/publisher"
	"github.com/BrianLusina/skillq/server/infra/mongodb"
	"github.com/BrianLusina/skillq/server/infra/storage/minio"
)

// Injectors from wire.go:

// InitApp initializes the user application
func InitApp(mongodbConfig mongodb.MongoDBConfig, amqpConfig amqp.Config, minioConfig minio.Config, emailConfig email.EmailClientConfig) (*App, error) {
	loggerLogger := logger.New()
	amqpClient, err := amqp.NewAmqpClient(amqpConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	amqpEventPublisher, err := amqppublisher.NewPublisher(amqpClient, loggerLogger)
	if err != nil {
		return nil, err
	}
	amqpEventConsumer, err := amqpconsumer.NewConsumer(amqpClient, loggerLogger)
	if err != nil {
		return nil, err
	}
	sendEmailEventPublisherPort := publishers.NewSendEmailEventPublisher(amqpEventPublisher)
	storeImageEventPublisherPort := publishers.NewStoreImageEventPublisher(amqpEventPublisher)
	storageClient, err := minio.NewClient(minioConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	mongoDBClient := di.ProvideUserMongoDbClient(mongodbConfig)
	userRepoPort := userrepo.New(mongoDBClient)
	userService := usersvc.New(userRepoPort, sendEmailEventPublisherPort, storeImageEventPublisherPort, storageClient)
	mongodbMongoDBClient := di.ProvideUserVerificationMongoDbClient(mongodbConfig)
	userVerificationRepoPort := userverificationrepo.New(mongodbMongoDBClient)
	userVerificationService := usersvc.NewVerification(userService, userVerificationRepoPort)
	emailClient := email.New(emailConfig, loggerLogger)
	eventHandler := di.ProvideSendEmailVerificationTaskHandler(emailClient, userVerificationService, userRepoPort)
	handlersEventHandler := di.ProvideStoreImageTaskHandler(storageClient, userRepoPort, amqpEventPublisher)
	userApp := New(mongodbConfig, amqpConfig, minioConfig, emailConfig, loggerLogger, amqpClient, amqpEventPublisher, amqpEventConsumer, sendEmailEventPublisherPort, storeImageEventPublisherPort, storageClient, userRepoPort, mongoDBClient, userService, mongodbMongoDBClient, userVerificationRepoPort, userVerificationService, eventHandler, handlersEventHandler, emailClient)
	return userApp, nil
}
