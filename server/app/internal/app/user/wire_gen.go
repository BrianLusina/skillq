// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package userapp

import (
	"github.com/BrianLusina/skillq/server/app/di"
	"github.com/BrianLusina/skillq/server/app/internal/database/repositories/userrepo"
	userverificationrepo "github.com/BrianLusina/skillq/server/app/internal/database/repositories/userverification"
	"github.com/BrianLusina/skillq/server/app/internal/domain/services/usersvc"
	"github.com/BrianLusina/skillq/server/infra/logger"
	"github.com/BrianLusina/skillq/server/infra/messaging/amqp"
	"github.com/BrianLusina/skillq/server/infra/messaging/amqp/publisher"
	"github.com/BrianLusina/skillq/server/infra/mongodb"
	"github.com/BrianLusina/skillq/server/infra/storage/minio"
)

// Injectors from wire.go:

// InitializeUserApp initializes the user application
func InitializeUserApp(mongodbConfig mongodb.MongoDBConfig, amqpConfig amqp.Config, minioConfig minio.Config) (*UserApp, func(), error) {
	loggerLogger := logger.New()
	mongoDBClient := di.ProvideUserMongoDbClient(mongodbConfig)
	mongodbMongoDBClient := di.ProvideUserVerificationMongoDbClient(mongodbConfig)
	amqpClient, err := amqp.NewAmqpClient(amqpConfig, loggerLogger)
	if err != nil {
		return nil, nil, err
	}
	amqpEventPublisher, err := amqppublisher.NewPublisher(amqpClient, loggerLogger)
	if err != nil {
		return nil, nil, err
	}
	storageClient, err := minio.NewClient(minioConfig, loggerLogger)
	if err != nil {
		return nil, nil, err
	}
	userRepoPort := userrepo.New(mongoDBClient)
	userVerificationRepoPort := userverificationrepo.New(mongodbMongoDBClient)
	userUseCase := usersvc.New(userRepoPort, userVerificationRepoPort, amqpEventPublisher, storageClient)
	userApp := New(mongodbConfig, amqpConfig, minioConfig, loggerLogger, mongoDBClient, mongodbMongoDBClient, amqpClient, amqpEventPublisher, storageClient, userRepoPort, userVerificationRepoPort, userUseCase)
	return userApp, func() {
	}, nil
}
