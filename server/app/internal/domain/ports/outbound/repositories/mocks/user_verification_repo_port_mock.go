// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/domain/ports/outbound/repositories/user_verification_repo_port.go
//
// Generated by this command:
//
//	mockgen -source app/internal/domain/ports/outbound/repositories/user_verification_repo_port.go -destination app/internal/domain/ports/outbound/repositories/mocks/user_verification_repo_port_mock.go -package mockuserrepo
//

// Package mockuserrepo is a generated GoMock package.
package mockuserrepo

import (
	context "context"
	reflect "reflect"

	user "github.com/BrianLusina/skillq/server/app/internal/domain/entities/user"
	id "github.com/BrianLusina/skillq/server/domain/id"
	gomock "go.uber.org/mock/gomock"
)

// MockUserVerificationRepoPort is a mock of UserVerificationRepoPort interface.
type MockUserVerificationRepoPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserVerificationRepoPortMockRecorder
}

// MockUserVerificationRepoPortMockRecorder is the mock recorder for MockUserVerificationRepoPort.
type MockUserVerificationRepoPortMockRecorder struct {
	mock *MockUserVerificationRepoPort
}

// NewMockUserVerificationRepoPort creates a new mock instance.
func NewMockUserVerificationRepoPort(ctrl *gomock.Controller) *MockUserVerificationRepoPort {
	mock := &MockUserVerificationRepoPort{ctrl: ctrl}
	mock.recorder = &MockUserVerificationRepoPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserVerificationRepoPort) EXPECT() *MockUserVerificationRepoPortMockRecorder {
	return m.recorder
}

// CreateUserVerification mocks base method.
func (m *MockUserVerificationRepoPort) CreateUserVerification(arg0 context.Context, arg1 user.UserVerification) (*user.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserVerification", arg0, arg1)
	ret0, _ := ret[0].(*user.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserVerification indicates an expected call of CreateUserVerification.
func (mr *MockUserVerificationRepoPortMockRecorder) CreateUserVerification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserVerification", reflect.TypeOf((*MockUserVerificationRepoPort)(nil).CreateUserVerification), arg0, arg1)
}

// GetUserVerificationByCode mocks base method.
func (m *MockUserVerificationRepoPort) GetUserVerificationByCode(arg0 context.Context, arg1 string) (*user.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerificationByCode", arg0, arg1)
	ret0, _ := ret[0].(*user.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVerificationByCode indicates an expected call of GetUserVerificationByCode.
func (mr *MockUserVerificationRepoPortMockRecorder) GetUserVerificationByCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerificationByCode", reflect.TypeOf((*MockUserVerificationRepoPort)(nil).GetUserVerificationByCode), arg0, arg1)
}

// GetUserVerificationByUUID mocks base method.
func (m *MockUserVerificationRepoPort) GetUserVerificationByUUID(arg0 context.Context, arg1 id.UUID) (*user.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerificationByUUID", arg0, arg1)
	ret0, _ := ret[0].(*user.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVerificationByUUID indicates an expected call of GetUserVerificationByUUID.
func (mr *MockUserVerificationRepoPortMockRecorder) GetUserVerificationByUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerificationByUUID", reflect.TypeOf((*MockUserVerificationRepoPort)(nil).GetUserVerificationByUUID), arg0, arg1)
}
