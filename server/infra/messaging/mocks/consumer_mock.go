// Code generated by MockGen. DO NOT EDIT.
// Source: infra/messaging/consumer.go
//
// Generated by this command:
//
//	mockgen -source infra/messaging/consumer.go -destination infra/messaging/mocks/consumer_mock.go -package mockmessaging
//

// Package mockmessaging is a generated GoMock package.
package mockmessaging

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockConsumer) AddHandler(ctx context.Context, task string, handler func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", ctx, task, handler)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockConsumerMockRecorder) AddHandler(ctx, task, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockConsumer)(nil).AddHandler), ctx, task, handler)
}

// Consume mocks base method.
func (m *MockConsumer) Consume(ctx context.Context, queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(ctx, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), ctx, queue)
}

// StartConsumer mocks base method.
func (m *MockConsumer) StartConsumer(fn func(ctx context.Context, message any)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsumer", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsumer indicates an expected call of StartConsumer.
func (mr *MockConsumerMockRecorder) StartConsumer(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockConsumer)(nil).StartConsumer), fn)
}
