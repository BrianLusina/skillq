// Code generated by MockGen. DO NOT EDIT.
// Source: infra/messaging/amqp/consumer/consumer.go
//
// Generated by this command:
//
//	mockgen -source infra/messaging/amqp/consumer/consumer.go -destination infra/messaging/amqp/consumer/mocks/consumer_mock.go -package mockamqpconsumer
//

// Package mockamqpconsumer is a generated GoMock package.
package mockamqpconsumer

import (
	context "context"
	reflect "reflect"

	amqpconsumer "github.com/BrianLusina/skillq/server/infra/messaging/amqp/consumer"
	gomock "go.uber.org/mock/gomock"
)

// MockAmqpEventConsumer is a mock of AmqpEventConsumer interface.
type MockAmqpEventConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockAmqpEventConsumerMockRecorder
}

// MockAmqpEventConsumerMockRecorder is the mock recorder for MockAmqpEventConsumer.
type MockAmqpEventConsumerMockRecorder struct {
	mock *MockAmqpEventConsumer
}

// NewMockAmqpEventConsumer creates a new mock instance.
func NewMockAmqpEventConsumer(ctrl *gomock.Controller) *MockAmqpEventConsumer {
	mock := &MockAmqpEventConsumer{ctrl: ctrl}
	mock.recorder = &MockAmqpEventConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmqpEventConsumer) EXPECT() *MockAmqpEventConsumerMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockAmqpEventConsumer) AddHandler(ctx context.Context, task string, handler func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", ctx, task, handler)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockAmqpEventConsumerMockRecorder) AddHandler(ctx, task, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockAmqpEventConsumer)(nil).AddHandler), ctx, task, handler)
}

// Configure mocks base method.
func (m *MockAmqpEventConsumer) Configure(arg0 ...amqpconsumer.Option) amqpconsumer.AmqpEventConsumer {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Configure", varargs...)
	ret0, _ := ret[0].(amqpconsumer.AmqpEventConsumer)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockAmqpEventConsumerMockRecorder) Configure(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockAmqpEventConsumer)(nil).Configure), arg0...)
}

// Consume mocks base method.
func (m *MockAmqpEventConsumer) Consume(ctx context.Context, queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockAmqpEventConsumerMockRecorder) Consume(ctx, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockAmqpEventConsumer)(nil).Consume), ctx, queue)
}

// StartConsumer mocks base method.
func (m *MockAmqpEventConsumer) StartConsumer(fn func(context.Context, any)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsumer", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsumer indicates an expected call of StartConsumer.
func (mr *MockAmqpEventConsumerMockRecorder) StartConsumer(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockAmqpEventConsumer)(nil).StartConsumer), fn)
}
