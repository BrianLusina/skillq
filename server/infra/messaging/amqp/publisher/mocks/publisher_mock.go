// Code generated by MockGen. DO NOT EDIT.
// Source: infra/messaging/amqp/publisher/publisher.go
//
// Generated by this command:
//
//	mockgen -source infra/messaging/amqp/publisher/publisher.go -destination infra/messaging/amqp/publisher/mocks/publisher_mock.go -package mockamqppublisher
//

// Package mockamqppublisher is a generated GoMock package.
package mockamqppublisher

import (
	context "context"
	reflect "reflect"

	amqppublisher "github.com/BrianLusina/skillq/server/infra/messaging/amqp/publisher"
	gomock "go.uber.org/mock/gomock"
)

// MockAmqpEventPublisher is a mock of AmqpEventPublisher interface.
type MockAmqpEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockAmqpEventPublisherMockRecorder
}

// MockAmqpEventPublisherMockRecorder is the mock recorder for MockAmqpEventPublisher.
type MockAmqpEventPublisherMockRecorder struct {
	mock *MockAmqpEventPublisher
}

// NewMockAmqpEventPublisher creates a new mock instance.
func NewMockAmqpEventPublisher(ctrl *gomock.Controller) *MockAmqpEventPublisher {
	mock := &MockAmqpEventPublisher{ctrl: ctrl}
	mock.recorder = &MockAmqpEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmqpEventPublisher) EXPECT() *MockAmqpEventPublisherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAmqpEventPublisher) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAmqpEventPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAmqpEventPublisher)(nil).Close))
}

// Configure mocks base method.
func (m *MockAmqpEventPublisher) Configure(arg0 ...amqppublisher.Option) amqppublisher.AmqpEventPublisher {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Configure", varargs...)
	ret0, _ := ret[0].(amqppublisher.AmqpEventPublisher)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockAmqpEventPublisherMockRecorder) Configure(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockAmqpEventPublisher)(nil).Configure), arg0...)
}

// Publish mocks base method.
func (m *MockAmqpEventPublisher) Publish(ctx context.Context, body []byte, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, body, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAmqpEventPublisherMockRecorder) Publish(ctx, body, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAmqpEventPublisher)(nil).Publish), ctx, body, contentType)
}
